/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.coralcea.modules.jasper;

import java.io.IOException;
import java.io.Serializable;
import java.util.UUID;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.broker.BrokerService;
import org.apache.log4j.Logger;
import org.jasper.jLib.jAuth.util.JAuthHelper;
import org.jasper.jLib.jCommons.admin.JasperAdminMessage;
import org.jasper.jLib.jCommons.admin.JasperAdminMessage.Command;
import org.jasper.jLib.jCommons.admin.JasperAdminMessage.Type;
import org.junit.Test;
import org.mule.api.MuleContext;
import org.mule.api.MuleEvent;
import org.mule.api.config.MuleProperties;
import org.mule.construct.Flow;
import org.mule.tck.AbstractMuleTestCase;
import org.mule.tck.FunctionalTestCase;

public class JasperConnectorTest extends FunctionalTestCase
{
	static Logger log = Logger.getLogger(JasperConnectorTest.class.getName());
	private String GLOBAL_QUEUE = "jms.jasper.delegate.global.queue";
	private String ADDRESS = "tcp://0.0.0.0:61616";
	
	private static BrokerService broker;
	
    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    protected void suitePreSetUp() throws Exception
    {
		broker = new BrokerService();
		broker.setUseJmx(true);
		broker.setPersistent(false);
		broker.setBrokerName("Broker_for_stubbing_activemq");
		try {
			broker.addConnector(ADDRESS);
			broker.start();
			log.info("=========Broker Started==========");
		} catch (Exception e) {
			log.error(e.getMessage());
		}
		super.doSetUp();
    }

    protected void suitePostTearDown() throws Exception
    {
        super.doTearDown();
        if (broker != null) {
	        broker.stop();
	        broker = null;
			log.info("=========Broker Stopped==========");
        }
    }

    protected MuleContext createMuleContext() throws Exception {
    	MuleContext context = super.createMuleContext();
    	context.getRegistry().registerObject(
    		MuleProperties.APP_HOME_DIRECTORY_PROPERTY, 
    		getClass().getProtectionDomain().getCodeSource().getLocation().getPath());
    	return context;
    }
    
    @Test
    public void testAdminMessage() throws Exception
    {
	    String queueName = "jms.jasper.jasperConnectorTestDTA.0.1.jasperLab.admin.queue";
    	TestConnection connection = new TestConnection();
		Queue q = connection.getSession().createQueue(queueName);
		MessageProducer producer = connection.getSession().createProducer(q);
		producer.setDeliveryMode(DeliveryMode.PERSISTENT);
		producer.setTimeToLive(30000);
		
		Queue q2 = connection.getSession().createQueue("ResponseQueue");
		MessageConsumer consumer = connection.getSession().createConsumer(q2);
		consumer.setMessageListener(connection);
    	
    	connection.start();
    	JasperAdminMessage message = new JasperAdminMessage(Type.ontologyManagement, Command.get_ontology);
		producer.send(connection.createObjectMessage(message, q2));
    	Thread.sleep(3000);
    	Object payload = ((ObjectMessage) connection.getReceivedMsg()).getObject();
    	assertEquals(((String[][])payload).length, 7);
    	connection.stop();
    }

    @Test
    public void testPublishToTopic() throws Exception
    {
    	TestConnection connection = new TestConnection();
		Topic t = connection.getSession().createTopic("Topic1");
		MessageConsumer consumer = connection.getSession().createConsumer(t);
		consumer.setMessageListener(connection);
    	
    	connection.start();
    	runFlowWithPayloadAndExpect("testPublishToTopic", "Update", "Update");
    	connection.assertReceivedEquals(1000, "Update");
    	connection.stop();
    }

    @Test
    public void testSendToQueueReceiveResponse() throws Exception
    {
    	TestConnection connection = new TestConnection();
		Queue q = connection.getSession().createQueue(GLOBAL_QUEUE);
		MessageConsumer consumer = connection.getSession().createConsumer(q);
		consumer.setMessageListener(connection);
    	
    	connection.start();
    	connection.setReply("Reply");
    	runFlowWithPayloadAndExpect("testSendToQueueReceiveResponse", "Reply", "Request");
    	connection.assertReceivedEquals(1000, "Request");
    	connection.stop();
    }

    @Test
    public void testSubscribeToTopic() throws Exception
    {
    	TestConnection connection = new TestConnection();
    	
		Topic t = connection.getSession().createTopic("Topic2");
		MessageProducer producer = connection.getSession().createProducer(t);
		producer.setDeliveryMode(DeliveryMode.PERSISTENT);
		producer.setTimeToLive(30000);

		Queue q = connection.getSession().createQueue("Queue2");
		MessageConsumer consumer = connection.getSession().createConsumer(q);
		consumer.setMessageListener(connection);

    	connection.start();
		producer.send(connection.createTextMessage("Update"));
    	connection.assertReceivedEquals(1000, "Update");
    	connection.stop();
    }

    @Test
    public void testReceiveFromQueueSendResponse() throws Exception
    {
    	TestConnection connection = new TestConnection();
    	
		Queue q = connection.getSession().createQueue("Queue3");
		MessageProducer producer = connection.getSession().createProducer(q);
		producer.setDeliveryMode(DeliveryMode.PERSISTENT);
		producer.setTimeToLive(30000);

		Queue q2 = connection.getSession().createQueue("Queue4");
		MessageConsumer consumer = connection.getSession().createConsumer(q2);
		consumer.setMessageListener(connection);

		connection.start();
		producer.send(connection.createTextMessage("Request", q2));
    	connection.assertReceivedEquals(1000, "Request is satisfied 100%");
    	connection.stop();
    }

    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }

    
    
    private class TestConnection implements MessageListener {
    	protected Connection connection;
    	protected Session session;
    	protected Message receivedMsg;
    	protected String replyPayload;
    	
    	public TestConnection() throws Exception {
       		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ADDRESS);
    		connection = connectionFactory.createConnection("", "");
    		session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    	}
    	
    	protected Session getSession() {
    		return session;
    	}
    	
    	public void start() throws Exception {
    		connection.start();
    	}
    	
    	public void setReply(String reply) throws Exception {
    		replyPayload = reply;
    	}

    	public void stop() throws Exception {
			session.close();
			connection.stop();
			connection.close();
    	}
    	
    	public Message getReceivedMsg() {
    		return receivedMsg;
    	}
    	
    	public void assertReceivedEquals(int sleep, String expected) throws Exception {
    		Thread.sleep(sleep);
    		JasperConnectorTest.assertEquals(expected, ((TextMessage)receivedMsg).getText());
    	}
    	
    	public void onMessage(Message msg) {
			try {
				receivedMsg = msg;
				if (msg.getJMSReplyTo()!=null && replyPayload!=null) {
					MessageProducer producer = session.createProducer(msg.getJMSReplyTo());
			        TextMessage reply = createTextMessage(replyPayload);
					reply.setJMSCorrelationID(msg.getJMSCorrelationID());
					producer.send(reply);
				}
			} catch (Exception e) {
				log.error(e.getMessage());
			}
		}
    	
    	public TextMessage createTextMessage(String s, Destination replyTo) throws Exception {
	        TextMessage msg = session.createTextMessage();
	        msg.setText(s);
	        msg.setJMSCorrelationID(UUID.randomUUID().toString());
	        msg.setJMSReplyTo(replyTo);
			return msg;
    	}
    	
    	public TextMessage createTextMessage(String s) throws Exception {
    		return createTextMessage(s, null);
    	}

    	public ObjectMessage createObjectMessage(Serializable o, Destination replyTo) throws Exception {
    		ObjectMessage msg = session.createObjectMessage();
	        msg.setObject(o);
	        msg.setJMSCorrelationID(UUID.randomUUID().toString());
	        msg.setJMSReplyTo(replyTo);
    		return msg;
    	}
    }
}
